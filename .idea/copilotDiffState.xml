<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/build.gradle.kts" />
              <option name="originalContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.kotlin.android)&#10;    alias(libs.plugins.kotlin.compose)&#10;    id(&quot;org.jetbrains.kotlin.kapt&quot;)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.example.locmark&quot;&#10;    compileSdk = 36&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.example.locmark&quot;&#10;        minSdk = 21&#10;        targetSdk = 36&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;11&quot;&#10;    }&#10;    buildFeatures {&#10;        compose = true&#10;    }&#10;}&#10;&#10;dependencies {&#10;&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#10;    implementation(libs.androidx.activity.compose)&#10;    implementation(platform(libs.androidx.compose.bom))&#10;    implementation(libs.androidx.ui)&#10;    implementation(libs.androidx.ui.graphics)&#10;    implementation(libs.androidx.ui.tooling.preview)&#10;    implementation(libs.androidx.material3)&#10;    implementation(libs.androidx.navigation.fragment.ktx)&#10;    implementation(libs.androidx.navigation.ui.ktx)&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;    androidTestImplementation(platform(libs.androidx.compose.bom))&#10;    androidTestImplementation(libs.androidx.ui.test.junit4)&#10;    debugImplementation(libs.androidx.ui.tooling)&#10;    debugImplementation(libs.androidx.ui.test.manifest)&#10;&#10;    // osmdroid for OpenStreetMap&#10;    implementation(&quot;org.osmdroid:osmdroid-android:6.1.16&quot;)&#10;    // Retrofit for networking&#10;    implementation(&quot;com.squareup.retrofit2:retrofit:2.9.0&quot;)&#10;    // GSON converter for Retrofit&#10;    implementation(&quot;com.squareup.retrofit2:converter-gson:2.9.0&quot;)&#10;    // Coroutines for async tasks&#10;    implementation(&quot;org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.1&quot;)&#10;    // ViewModel and LiveData&#10;    implementation(&quot;androidx.lifecycle:lifecycle-viewmodel-ktx:2.7.0&quot;)&#10;    implementation(&quot;androidx.lifecycle:lifecycle-livedata-ktx:2.7.0&quot;)&#10;    // Room (optional, for bonus)&#10;    implementation(&quot;androidx.room:room-runtime:2.6.1&quot;)&#10;    implementation(&quot;androidx.room:room-ktx:2.6.1&quot;)&#10;    kapt(&quot;androidx.room:room-compiler:2.6.1&quot;)&#10;}" />
              <option name="updatedContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.kotlin.android)&#10;    alias(libs.plugins.kotlin.compose)&#10;    id(&quot;org.jetbrains.kotlin.kapt&quot;)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.example.locmark&quot;&#10;    compileSdk = 36&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.example.locmark&quot;&#10;        minSdk = 21&#10;        targetSdk = 36&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;11&quot;&#10;    }&#10;    buildFeatures {&#10;        compose = true&#10;    }&#10;}&#10;&#10;dependencies {&#10;&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#10;    implementation(libs.androidx.activity.compose)&#10;    implementation(platform(libs.androidx.compose.bom))&#10;    implementation(libs.androidx.ui)&#10;    implementation(libs.androidx.ui.graphics)&#10;    implementation(libs.androidx.ui.tooling.preview)&#10;    implementation(libs.androidx.material3)&#10;    implementation(libs.androidx.navigation.fragment.ktx)&#10;    implementation(libs.androidx.navigation.ui.ktx)&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;    androidTestImplementation(platform(libs.androidx.compose.bom))&#10;    androidTestImplementation(libs.androidx.ui.test.junit4)&#10;    debugImplementation(libs.androidx.ui.tooling)&#10;    debugImplementation(libs.androidx.ui.test.manifest)&#10;&#10;    // osmdroid for OpenStreetMap&#10;    implementation(&quot;org.osmdroid:osmdroid-android:6.1.16&quot;)&#10;    // Retrofit for networking&#10;    implementation(&quot;com.squareup.retrofit2:retrofit:2.9.0&quot;)&#10;    // GSON converter for Retrofit&#10;    implementation(&quot;com.squareup.retrofit2:converter-gson:2.9.0&quot;)&#10;    // Coroutines for async tasks&#10;    implementation(&quot;org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.1&quot;)&#10;    // ViewModel and LiveData&#10;    implementation(&quot;androidx.lifecycle:lifecycle-viewmodel-ktx:2.7.0&quot;)&#10;    implementation(&quot;androidx.lifecycle:lifecycle-livedata-ktx:2.7.0&quot;)&#10;    // Room (optional, for bonus)&#10;    implementation(&quot;androidx.room:room-runtime:2.6.1&quot;)&#10;    implementation(&quot;androidx.room:room-ktx:2.6.1&quot;)&#10;    kapt(&quot;androidx.room:room-compiler:2.6.1&quot;)&#10;    // Google Play Services Location for FusedLocationProviderClient&#10;    implementation(&quot;com.google.android.gms:play-services-location:21.0.1&quot;)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/AndroidManifest.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/AndroidManifest.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;application&#10;        android:allowBackup=&quot;true&quot;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.MaterialComponents.DayNight.NoActionBar&quot;&#10;        android:usesCleartextTraffic=&quot;true&quot;&gt;&#10;        &lt;activity&#10;            android:name=&quot;.MainActivity&quot;&#10;            android:exported=&quot;true&quot;&#10;            android:label=&quot;@string/app_name&quot;&#10;            android:theme=&quot;@style/Theme.LocMark&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;    &lt;/application&gt;&#10;&#10;    &lt;!-- Permissions --&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.ACCESS_FINE_LOCATION&quot; /&gt;&#10;&#10;&lt;/manifest&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;application&#10;        android:allowBackup=&quot;true&quot;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.MaterialComponents.DayNight.NoActionBar&quot;&#10;        android:usesCleartextTraffic=&quot;true&quot;&gt;&#10;        &lt;activity&#10;            android:name=&quot;.MainActivity&quot;&#10;            android:exported=&quot;true&quot;&#10;            android:label=&quot;@string/app_name&quot;&#10;            android:theme=&quot;@style/Theme.LocMark&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;    &lt;/application&gt;&#10;&#10;    &lt;!-- Permissions --&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.ACCESS_FINE_LOCATION&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.ACCESS_COARSE_LOCATION&quot; /&gt;&#10;&#10;&lt;/manifest&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/locmark/EntityFormFragment.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/locmark/EntityFormFragment.kt" />
              <option name="originalContent" value="package com.example.locmark&#10;&#10;import android.Manifest&#10;import android.app.Activity&#10;import android.content.Intent&#10;import android.content.pm.PackageManager&#10;import android.net.Uri&#10;import android.os.Bundle&#10;import android.provider.MediaStore&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.Button&#10;import android.widget.EditText&#10;import android.widget.ImageView&#10;import android.widget.TextView&#10;import android.widget.Toast&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.core.app.ActivityCompat&#10;import androidx.core.content.ContextCompat&#10;import androidx.fragment.app.Fragment&#10;import androidx.fragment.app.activityViewModels&#10;import androidx.fragment.app.viewModels&#10;import com.example.locmark.viewmodel.EntityFormViewModel&#10;import com.example.locmark.viewmodel.MapViewModel&#10;import com.google.android.gms.location.FusedLocationProviderClient&#10;import com.google.android.gms.location.LocationServices&#10;&#10;class EntityFormFragment : Fragment() {&#10;    private lateinit var editTitle: EditText&#10;    private lateinit var editLat: EditText&#10;    private lateinit var editLon: EditText&#10;    private lateinit var btnGetLocation: Button&#10;    private lateinit var imagePreview: ImageView&#10;    private lateinit var btnSelectImage: Button&#10;    private lateinit var btnSave: Button&#10;    private var imageUri: Uri? = null&#10;    private var lat: Double? = null&#10;    private var lon: Double? = null&#10;    private lateinit var fusedLocationClient: FusedLocationProviderClient&#10;    private val viewModel: EntityFormViewModel by viewModels()&#10;    private val sharedMapViewModel: MapViewModel by activityViewModels()&#10;&#10;    private val pickImageLauncher = registerForActivityResult(ActivityResultContracts.GetContent()) { uri: Uri? -&gt;&#10;        uri?.let {&#10;            imageUri = it&#10;            imagePreview.setImageURI(it)&#10;        }&#10;    }&#10;&#10;    override fun onCreateView(&#10;        inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?&#10;    ): View? {&#10;        val view = inflater.inflate(R.layout.fragment_entity_form, container, false)&#10;        editTitle = view.findViewById(R.id.editTitle)&#10;        editLat = view.findViewById(R.id.editLat)&#10;        editLon = view.findViewById(R.id.editLon)&#10;        btnGetLocation = view.findViewById(R.id.btnGetLocation)&#10;        imagePreview = view.findViewById(R.id.imagePreview)&#10;        btnSelectImage = view.findViewById(R.id.btnSelectImage)&#10;        btnSave = view.findViewById(R.id.btnSave)&#10;        fusedLocationClient = LocationServices.getFusedLocationProviderClient(requireActivity())&#10;        return view&#10;    }&#10;&#10;    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {&#10;        super.onViewCreated(view, savedInstanceState)&#10;        btnSelectImage.setOnClickListener {&#10;            pickImageLauncher.launch(&quot;image/*&quot;)&#10;        }&#10;        btnGetLocation.setOnClickListener {&#10;            getLocation()&#10;        }&#10;        btnSave.setOnClickListener {&#10;            val title = editTitle.text.toString()&#10;            val latStr = editLat.text.toString()&#10;            val lonStr = editLon.text.toString()&#10;            val image = imageUri&#10;            val latValue = latStr.toDoubleOrNull()&#10;            val lonValue = lonStr.toDoubleOrNull()&#10;            if (title.isBlank() || latValue == null || lonValue == null || image == null) {&#10;                Toast.makeText(requireContext(), &quot;Fill all fields and select an image&quot;, Toast.LENGTH_SHORT).show()&#10;                return@setOnClickListener&#10;            }&#10;            if (latValue !in -90.0..90.0 || lonValue !in -180.0..180.0) {&#10;                Toast.makeText(requireContext(), &quot;Latitude must be between -90 and 90, Longitude between -180 and 180&quot;, Toast.LENGTH_SHORT).show()&#10;                return@setOnClickListener&#10;            }&#10;            viewModel.createEntity(title, latValue, lonValue, image)&#10;        }&#10;        viewModel.saveResult.observe(viewLifecycleOwner) { success -&gt;&#10;            if (success == true) {&#10;                Toast.makeText(requireContext(), &quot;Entity saved!&quot;, Toast.LENGTH_SHORT).show()&#10;                sharedMapViewModel.fetchEntities() // Refresh the list after creation&#10;                requireActivity().onBackPressedDispatcher.onBackPressed()&#10;            }&#10;        }&#10;        viewModel.error.observe(viewLifecycleOwner) { errorMsg -&gt;&#10;            errorMsg?.let {&#10;                Toast.makeText(requireContext(), it, Toast.LENGTH_SHORT).show()&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun getLocation() {&#10;        if (ContextCompat.checkSelfPermission(requireContext(), Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED) {&#10;            ActivityCompat.requestPermissions(requireActivity(), arrayOf(Manifest.permission.ACCESS_FINE_LOCATION), 100)&#10;            return&#10;        }&#10;        fusedLocationClient.lastLocation.addOnSuccessListener { location -&gt;&#10;            if (location != null) {&#10;                lat = location.latitude&#10;                lon = location.longitude&#10;                editLat.setText(lat.toString())&#10;                editLon.setText(lon.toString())&#10;            } else {&#10;                Toast.makeText(requireContext(), &quot;Unable to get location&quot;, Toast.LENGTH_SHORT).show()&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.locmark&#10;&#10;import android.Manifest&#10;import android.app.Activity&#10;import android.content.Intent&#10;import android.content.pm.PackageManager&#10;import android.net.Uri&#10;import android.os.Bundle&#10;import android.provider.MediaStore&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.Button&#10;import android.widget.EditText&#10;import android.widget.ImageView&#10;import android.widget.TextView&#10;import android.widget.Toast&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.core.app.ActivityCompat&#10;import androidx.core.content.ContextCompat&#10;import androidx.fragment.app.Fragment&#10;import androidx.fragment.app.activityViewModels&#10;import androidx.fragment.app.viewModels&#10;import com.example.locmark.viewmodel.EntityFormViewModel&#10;import com.example.locmark.viewmodel.MapViewModel&#10;import com.google.android.gms.location.FusedLocationProviderClient&#10;import com.google.android.gms.location.LocationServices&#10;&#10;class EntityFormFragment : Fragment() {&#10;    private lateinit var editTitle: EditText&#10;    private lateinit var editLat: EditText&#10;    private lateinit var editLon: EditText&#10;    private lateinit var imagePreview: ImageView&#10;    private lateinit var btnSelectImage: Button&#10;    private lateinit var btnSave: Button&#10;    private var imageUri: Uri? = null&#10;    private var lat: Double? = null&#10;    private var lon: Double? = null&#10;    private lateinit var fusedLocationClient: FusedLocationProviderClient&#10;    private val viewModel: EntityFormViewModel by viewModels()&#10;    private val sharedMapViewModel: MapViewModel by activityViewModels()&#10;&#10;    private val pickImageLauncher = registerForActivityResult(ActivityResultContracts.GetContent()) { uri: Uri? -&gt;&#10;        uri?.let {&#10;            imageUri = it&#10;            imagePreview.setImageURI(it)&#10;        }&#10;    }&#10;&#10;    override fun onCreateView(&#10;        inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?&#10;    ): View? {&#10;        val view = inflater.inflate(R.layout.fragment_entity_form, container, false)&#10;        editTitle = view.findViewById(R.id.editTitle)&#10;        editLat = view.findViewById(R.id.editLat)&#10;        editLon = view.findViewById(R.id.editLon)&#10;        imagePreview = view.findViewById(R.id.imagePreview)&#10;        btnSelectImage = view.findViewById(R.id.btnSelectImage)&#10;        btnSave = view.findViewById(R.id.btnSave)&#10;        fusedLocationClient = LocationServices.getFusedLocationProviderClient(requireActivity())&#10;        return view&#10;    }&#10;&#10;    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {&#10;        super.onViewCreated(view, savedInstanceState)&#10;        btnSelectImage.setOnClickListener {&#10;            pickImageLauncher.launch(&quot;image/*&quot;)&#10;        }&#10;        btnSave.setOnClickListener {&#10;            val title = editTitle.text.toString()&#10;            val latStr = editLat.text.toString()&#10;            val lonStr = editLon.text.toString()&#10;            val image = imageUri&#10;            val latValue = latStr.toDoubleOrNull()&#10;            val lonValue = lonStr.toDoubleOrNull()&#10;            if (title.isBlank() || latValue == null || lonValue == null || image == null) {&#10;                Toast.makeText(requireContext(), &quot;Fill all fields and select an image&quot;, Toast.LENGTH_SHORT).show()&#10;                return@setOnClickListener&#10;            }&#10;            if (latValue !in -90.0..90.0 || lonValue !in -180.0..180.0) {&#10;                Toast.makeText(requireContext(), &quot;Latitude must be between -90 and 90, Longitude between -180 and 180&quot;, Toast.LENGTH_SHORT).show()&#10;                return@setOnClickListener&#10;            }&#10;            viewModel.createEntity(title, latValue, lonValue, image)&#10;        }&#10;        viewModel.saveResult.observe(viewLifecycleOwner) { success -&gt;&#10;            if (success == true) {&#10;                Toast.makeText(requireContext(), &quot;Entity saved!&quot;, Toast.LENGTH_SHORT).show()&#10;                sharedMapViewModel.fetchEntities() // Refresh the list after creation&#10;                requireActivity().onBackPressedDispatcher.onBackPressed()&#10;            }&#10;        }&#10;        viewModel.error.observe(viewLifecycleOwner) { errorMsg -&gt;&#10;            errorMsg?.let {&#10;                Toast.makeText(requireContext(), it, Toast.LENGTH_SHORT).show()&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/locmark/EntityListFragment.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/locmark/EntityListFragment.kt" />
              <option name="originalContent" value="package com.example.locmark&#10;&#10;import android.os.Bundle&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import androidx.fragment.app.Fragment&#10;import androidx.fragment.app.viewModels&#10;import androidx.recyclerview.widget.LinearLayoutManager&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.example.locmark.adapter.EntityListAdapter&#10;import com.example.locmark.viewmodel.MapViewModel&#10;&#10;class EntityListFragment : Fragment() {&#10;    private lateinit var recyclerView: RecyclerView&#10;    private lateinit var adapter: EntityListAdapter&#10;    private val viewModel: MapViewModel by viewModels()&#10;&#10;    override fun onCreateView(&#10;        inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?&#10;    ): View? {&#10;        val view = inflater.inflate(R.layout.fragment_entity_list, container, false)&#10;        recyclerView = view.findViewById(R.id.recyclerView)&#10;        return view&#10;    }&#10;&#10;    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {&#10;        super.onViewCreated(view, savedInstanceState)&#10;        adapter = EntityListAdapter(emptyList())&#10;        recyclerView.layoutManager = LinearLayoutManager(requireContext())&#10;        recyclerView.adapter = adapter&#10;&#10;        viewModel.entities.observe(viewLifecycleOwner) { entities -&gt;&#10;            adapter.submitList(entities)&#10;        }&#10;        viewModel.fetchEntities()&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.locmark&#10;&#10;import android.os.Bundle&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import androidx.fragment.app.Fragment&#10;import androidx.fragment.app.activityViewModels&#10;import androidx.recyclerview.widget.LinearLayoutManager&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.example.locmark.adapter.EntityListAdapter&#10;import com.example.locmark.viewmodel.MapViewModel&#10;&#10;class EntityListFragment : Fragment() {&#10;    private lateinit var recyclerView: RecyclerView&#10;    private lateinit var adapter: EntityListAdapter&#10;    private val viewModel: MapViewModel by activityViewModels()&#10;&#10;    override fun onCreateView(&#10;        inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?&#10;    ): View? {&#10;        val view = inflater.inflate(R.layout.fragment_entity_list, container, false)&#10;        recyclerView = view.findViewById(R.id.recyclerView)&#10;        return view&#10;    }&#10;&#10;    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {&#10;        super.onViewCreated(view, savedInstanceState)&#10;        adapter = EntityListAdapter(emptyList())&#10;        recyclerView.layoutManager = LinearLayoutManager(requireContext())&#10;        recyclerView.adapter = adapter&#10;&#10;        viewModel.entities.observe(viewLifecycleOwner) { entities -&gt;&#10;            adapter.submitList(entities)&#10;        }&#10;        viewModel.fetchEntities()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/locmark/MainActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/locmark/MainActivity.kt" />
              <option name="originalContent" value="package com.example.locmark&#10;&#10;import android.os.Bundle&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.core.view.GravityCompat&#10;import androidx.drawerlayout.widget.DrawerLayout&#10;import androidx.navigation.NavController&#10;import androidx.navigation.fragment.NavHostFragment&#10;import androidx.navigation.ui.AppBarConfiguration&#10;import androidx.navigation.ui.NavigationUI&#10;import com.google.android.material.navigation.NavigationView&#10;import com.example.locmark.R&#10;&#10;class MainActivity : AppCompatActivity() {&#10;    private lateinit var drawerLayout: DrawerLayout&#10;    private lateinit var navController: NavController&#10;    private lateinit var appBarConfiguration: AppBarConfiguration&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.main_activity)&#10;&#10;        drawerLayout = findViewById(R.id.drawer_layout)&#10;        val navView: NavigationView = findViewById(R.id.navigation_view)&#10;        val navHostFragment = supportFragmentManager.findFragmentById(R.id.nav_host_fragment_container) as NavHostFragment&#10;        navController = navHostFragment.navController&#10;&#10;        appBarConfiguration = AppBarConfiguration(&#10;            setOf(R.id.mapFragment, R.id.entityFormFragment, R.id.entityListFragment), drawerLayout&#10;        )&#10;        NavigationUI.setupWithNavController(navView, navController)&#10;&#10;        navView.setNavigationItemSelectedListener { menuItem -&gt;&#10;            when (menuItem.itemId) {&#10;                R.id.nav_map -&gt; navController.navigate(R.id.mapFragment)&#10;                R.id.nav_form -&gt; navController.navigate(R.id.entityFormFragment)&#10;                R.id.nav_list -&gt; navController.navigate(R.id.entityListFragment)&#10;            }&#10;            drawerLayout.closeDrawer(GravityCompat.START)&#10;            true&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.locmark&#10;&#10;import android.os.Bundle&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.appcompat.widget.Toolbar&#10;import androidx.core.view.GravityCompat&#10;import androidx.drawerlayout.widget.DrawerLayout&#10;import androidx.navigation.NavController&#10;import androidx.navigation.fragment.NavHostFragment&#10;import androidx.navigation.ui.AppBarConfiguration&#10;import androidx.navigation.ui.NavigationUI&#10;import com.google.android.material.navigation.NavigationView&#10;import com.example.locmark.R&#10;&#10;class MainActivity : AppCompatActivity() {&#10;    private lateinit var drawerLayout: DrawerLayout&#10;    private lateinit var navController: NavController&#10;    private lateinit var appBarConfiguration: AppBarConfiguration&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.main_activity)&#10;&#10;        val toolbar: Toolbar = findViewById(R.id.toolbar)&#10;        setSupportActionBar(toolbar)&#10;&#10;        drawerLayout = findViewById(R.id.drawer_layout)&#10;        val navView: NavigationView = findViewById(R.id.navigation_view)&#10;        val navHostFragment = supportFragmentManager.findFragmentById(R.id.nav_host_fragment_container) as NavHostFragment&#10;        navController = navHostFragment.navController&#10;&#10;        appBarConfiguration = AppBarConfiguration(&#10;            setOf(R.id.mapFragment, R.id.entityFormFragment, R.id.entityListFragment), drawerLayout&#10;        )&#10;        NavigationUI.setupActionBarWithNavController(this, navController, appBarConfiguration)&#10;        NavigationUI.setupWithNavController(navView, navController)&#10;&#10;        navView.setNavigationItemSelectedListener { menuItem -&gt;&#10;            when (menuItem.itemId) {&#10;                R.id.nav_map -&gt; navController.navigate(R.id.mapFragment)&#10;                R.id.nav_form -&gt; navController.navigate(R.id.entityFormFragment)&#10;                R.id.nav_list -&gt; navController.navigate(R.id.entityListFragment)&#10;            }&#10;            drawerLayout.closeDrawer(GravityCompat.START)&#10;            true&#10;        }&#10;    }&#10;&#10;    override fun onSupportNavigateUp(): Boolean {&#10;        return NavigationUI.navigateUp(navController, appBarConfiguration) || super.onSupportNavigateUp()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/locmark/MapFragment.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/locmark/MapFragment.kt" />
              <option name="originalContent" value="package com.example.locmark&#10;&#10;import android.Manifest&#10;import android.content.pm.PackageManager&#10;import android.os.Bundle&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import androidx.core.app.ActivityCompat&#10;import androidx.core.content.ContextCompat&#10;import androidx.fragment.app.Fragment&#10;import androidx.fragment.app.viewModels&#10;import androidx.navigation.fragment.findNavController&#10;import com.example.locmark.viewmodel.MapViewModel&#10;import org.osmdroid.config.Configuration&#10;import org.osmdroid.util.GeoPoint&#10;import org.osmdroid.views.MapView&#10;import org.osmdroid.views.overlay.Marker&#10;import org.osmdroid.views.overlay.mylocation.GpsMyLocationProvider&#10;import org.osmdroid.views.overlay.mylocation.MyLocationNewOverlay&#10;&#10;class MapFragment : Fragment() {&#10;    private lateinit var mapView: MapView&#10;    private var myLocationOverlay: MyLocationNewOverlay? = null&#10;    private val viewModel: MapViewModel by viewModels()&#10;    private val LOCATION_PERMISSION_REQUEST = 101&#10;&#10;    override fun onCreateView(&#10;        inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?&#10;    ): View? {&#10;        val view = inflater.inflate(R.layout.fragment_map, container, false)&#10;        mapView = view.findViewById(R.id.mapView)&#10;        return view&#10;    }&#10;&#10;    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {&#10;        super.onViewCreated(view, savedInstanceState)&#10;        // Initialize osmdroid config&#10;        Configuration.getInstance().load(requireContext(), requireContext().getSharedPreferences(&quot;osmdroid&quot;, 0))&#10;        mapView.setMultiTouchControls(true)&#10;        val mapController = mapView.controller&#10;        mapController.setZoom(7.0)&#10;        mapController.setCenter(GeoPoint(23.6850, 90.3563)) // Bangladesh&#10;&#10;        // Show real-time location&#10;        if (ContextCompat.checkSelfPermission(requireContext(), Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED) {&#10;            enableMyLocation()&#10;        } else {&#10;            ActivityCompat.requestPermissions(requireActivity(), arrayOf(Manifest.permission.ACCESS_FINE_LOCATION), LOCATION_PERMISSION_REQUEST)&#10;        }&#10;&#10;        view.findViewById&lt;com.google.android.material.floatingactionbutton.FloatingActionButton&gt;(R.id.fabAddEntity).setOnClickListener {&#10;            // Navigate to EntityFormFragment&#10;            findNavController().navigate(R.id.entityFormFragment)&#10;        }&#10;&#10;        viewModel.entities.observe(viewLifecycleOwner) { entities -&gt;&#10;            // Remove all overlays except myLocationOverlay&#10;            mapView.overlays.removeAll { it != myLocationOverlay }&#10;            entities.forEach { entity -&gt;&#10;                val marker = Marker(mapView)&#10;                marker.position = GeoPoint(entity.lat, entity.lon)&#10;                marker.title = entity.title&#10;                marker.setAnchor(Marker.ANCHOR_CENTER, Marker.ANCHOR_BOTTOM)&#10;                mapView.overlays.add(marker)&#10;            }&#10;            mapView.invalidate()&#10;        }&#10;        viewModel.fetchEntities()&#10;    }&#10;&#10;    private fun enableMyLocation() {&#10;        if (myLocationOverlay == null) {&#10;            myLocationOverlay = MyLocationNewOverlay(GpsMyLocationProvider(requireContext()), mapView)&#10;            myLocationOverlay?.enableMyLocation()&#10;            mapView.overlays.add(0, myLocationOverlay)&#10;        }&#10;    }&#10;&#10;    @Deprecated(&quot;onRequestPermissionsResult is deprecated, but required for compatibility.&quot;)&#10;    override fun onRequestPermissionsResult(requestCode: Int, permissions: Array&lt;out String&gt;, grantResults: IntArray) {&#10;        super.onRequestPermissionsResult(requestCode, permissions, grantResults)&#10;        if (requestCode == LOCATION_PERMISSION_REQUEST &amp;&amp; grantResults.isNotEmpty() &amp;&amp; grantResults[0] == PackageManager.PERMISSION_GRANTED) {&#10;            enableMyLocation()&#10;        }&#10;    }&#10;&#10;    override fun onResume() {&#10;        super.onResume()&#10;        mapView.onResume()&#10;        myLocationOverlay?.enableMyLocation()&#10;    }&#10;&#10;    override fun onPause() {&#10;        super.onPause()&#10;        mapView.onPause()&#10;        myLocationOverlay?.disableMyLocation()&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.locmark&#10;&#10;import android.Manifest&#10;import android.content.pm.PackageManager&#10;import android.os.Bundle&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import androidx.core.app.ActivityCompat&#10;import androidx.core.content.ContextCompat&#10;import androidx.fragment.app.Fragment&#10;import androidx.fragment.app.viewModels&#10;import androidx.navigation.fragment.findNavController&#10;import com.example.locmark.viewmodel.MapViewModel&#10;import org.osmdroid.config.Configuration&#10;import org.osmdroid.util.GeoPoint&#10;import org.osmdroid.views.MapView&#10;import org.osmdroid.views.overlay.Marker&#10;import org.osmdroid.views.overlay.mylocation.GpsMyLocationProvider&#10;import org.osmdroid.views.overlay.mylocation.MyLocationNewOverlay&#10;&#10;class MapFragment : Fragment() {&#10;    private lateinit var mapView: MapView&#10;    private var myLocationOverlay: MyLocationNewOverlay? = null&#10;    private val viewModel: MapViewModel by viewModels()&#10;    private val LOCATION_PERMISSION_REQUEST = 101&#10;&#10;    override fun onCreateView(&#10;        inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?&#10;    ): View? {&#10;        val view = inflater.inflate(R.layout.fragment_map, container, false)&#10;        mapView = view.findViewById(R.id.mapView)&#10;        return view&#10;    }&#10;&#10;    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {&#10;        super.onViewCreated(view, savedInstanceState)&#10;        // Initialize osmdroid config&#10;        Configuration.getInstance().load(requireContext(), requireContext().getSharedPreferences(&quot;osmdroid&quot;, 0))&#10;        mapView.setMultiTouchControls(true)&#10;        val mapController = mapView.controller&#10;        mapController.setZoom(7.0)&#10;        mapController.setCenter(GeoPoint(23.6850, 90.3563)) // Bangladesh&#10;&#10;        // Show real-time location&#10;        if (ContextCompat.checkSelfPermission(requireContext(), Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED) {&#10;            enableMyLocation()&#10;        } else {&#10;            ActivityCompat.requestPermissions(requireActivity(), arrayOf(Manifest.permission.ACCESS_FINE_LOCATION), LOCATION_PERMISSION_REQUEST)&#10;        }&#10;&#10;        view.findViewById&lt;com.google.android.material.floatingactionbutton.FloatingActionButton&gt;(R.id.fabAddEntity).setOnClickListener {&#10;            // Navigate to EntityFormFragment&#10;            findNavController().navigate(R.id.entityFormFragment)&#10;        }&#10;&#10;        viewModel.entities.observe(viewLifecycleOwner) { entities -&gt;&#10;            // Remove all overlays except myLocationOverlay&#10;            mapView.overlays.removeAll { it != myLocationOverlay }&#10;            entities.forEach { entity -&gt;&#10;                val marker = Marker(mapView)&#10;                marker.position = GeoPoint(entity.lat, entity.lon)&#10;                marker.title = entity.title&#10;                marker.setAnchor(Marker.ANCHOR_CENTER, Marker.ANCHOR_BOTTOM)&#10;                mapView.overlays.add(marker)&#10;            }&#10;            mapView.invalidate()&#10;        }&#10;        viewModel.fetchEntities()&#10;    }&#10;&#10;    private fun enableMyLocation() {&#10;        if (myLocationOverlay == null) {&#10;            myLocationOverlay = MyLocationNewOverlay(GpsMyLocationProvider(requireContext()), mapView)&#10;            myLocationOverlay?.enableMyLocation()&#10;            mapView.overlays.add(0, myLocationOverlay)&#10;        }&#10;    }&#10;&#10;    @Suppress(&quot;DEPRECATION&quot;)&#10;    @Deprecated(&quot;onRequestPermissionsResult is deprecated, but required for compatibility.&quot;)&#10;    override fun onRequestPermissionsResult(requestCode: Int, permissions: Array&lt;out String&gt;, grantResults: IntArray) {&#10;        super.onRequestPermissionsResult(requestCode, permissions, grantResults)&#10;        if (requestCode == LOCATION_PERMISSION_REQUEST &amp;&amp; grantResults.isNotEmpty() &amp;&amp; grantResults[0] == PackageManager.PERMISSION_GRANTED) {&#10;            enableMyLocation()&#10;        }&#10;    }&#10;&#10;    override fun onResume() {&#10;        super.onResume()&#10;        mapView.onResume()&#10;        myLocationOverlay?.enableMyLocation()&#10;    }&#10;&#10;    override fun onPause() {&#10;        super.onPause()&#10;        mapView.onPause()&#10;        myLocationOverlay?.disableMyLocation()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/locmark/adapter/EntityListAdapter.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/locmark/adapter/EntityListAdapter.kt" />
              <option name="updatedContent" value="package com.example.locmark.adapter&#10;&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.TextView&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.example.locmark.R&#10;import com.example.locmark.model.Entity&#10;&#10;class EntityListAdapter(private var entities: List&lt;Entity&gt;) : RecyclerView.Adapter&lt;EntityListAdapter.EntityViewHolder&gt;() {&#10;    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): EntityViewHolder {&#10;        val view = LayoutInflater.from(parent.context).inflate(R.layout.item_entity, parent, false)&#10;        return EntityViewHolder(view)&#10;    }&#10;&#10;    override fun onBindViewHolder(holder: EntityViewHolder, position: Int) {&#10;        val entity = entities[position]&#10;        holder.titleText.text = entity.title&#10;    }&#10;&#10;    override fun getItemCount(): Int = entities.size&#10;&#10;    fun submitList(newEntities: List&lt;Entity&gt;) {&#10;        entities = newEntities&#10;        notifyDataSetChanged()&#10;    }&#10;&#10;    class EntityViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {&#10;        val titleText: TextView = itemView.findViewById(R.id.entityTitle)&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/locmark/model/Entity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/locmark/model/Entity.kt" />
              <option name="updatedContent" value="package com.example.locmark.model&#10;&#10;data class Entity(&#10;    val id: Int,&#10;    val title: String,&#10;    val lat: Double,&#10;    val lon: Double,&#10;    val image: String&#10;)&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/locmark/network/ApiService.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/locmark/network/ApiService.kt" />
              <option name="updatedContent" value="package com.example.locmark.network&#10;&#10;import com.example.locmark.model.Entity&#10;import okhttp3.MultipartBody&#10;import okhttp3.RequestBody&#10;import retrofit2.Response&#10;import retrofit2.http.*&#10;&#10;interface ApiService {&#10;    @GET(&quot;api.php&quot;)&#10;    suspend fun getEntities(): Response&lt;List&lt;Entity&gt;&gt;&#10;&#10;    @Multipart&#10;    @POST(&quot;api.php&quot;)&#10;    suspend fun createEntity(&#10;        @Part(&quot;title&quot;) title: RequestBody,&#10;        @Part(&quot;lat&quot;) lat: RequestBody,&#10;        @Part(&quot;lon&quot;) lon: RequestBody,&#10;        @Part image: MultipartBody.Part&#10;    ): Response&lt;Entity&gt;&#10;&#10;    @FormUrlEncoded&#10;    @PUT(&quot;api.php&quot;)&#10;    suspend fun updateEntity(&#10;        @Field(&quot;id&quot;) id: Int,&#10;        @Field(&quot;title&quot;) title: String,&#10;        @Field(&quot;lat&quot;) lat: Double,&#10;        @Field(&quot;lon&quot;) lon: Double&#10;    ): Response&lt;Void&gt;&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/locmark/network/RetrofitClient.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/locmark/network/RetrofitClient.kt" />
              <option name="updatedContent" value="package com.example.locmark.network&#10;&#10;import retrofit2.Retrofit&#10;import retrofit2.converter.gson.GsonConverterFactory&#10;&#10;object RetrofitClient {&#10;    private const val BASE_URL = &quot;http://10.0.2.2/path/to/your/api/folder/&quot;&#10;&#10;    val apiService: ApiService by lazy {&#10;        Retrofit.Builder()&#10;            .baseUrl(BASE_URL)&#10;            .addConverterFactory(GsonConverterFactory.create())&#10;            .build()&#10;            .create(ApiService::class.java)&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/locmark/repository/EntityRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/locmark/repository/EntityRepository.kt" />
              <option name="updatedContent" value="package com.example.locmark.repository&#10;&#10;import androidx.lifecycle.LiveData&#10;import androidx.lifecycle.MutableLiveData&#10;import com.example.locmark.model.Entity&#10;import com.example.locmark.network.RetrofitClient&#10;import kotlinx.coroutines.Dispatchers&#10;import kotlinx.coroutines.withContext&#10;&#10;class EntityRepository {&#10;    private val _entities = MutableLiveData&lt;List&lt;Entity&gt;&gt;()&#10;    val entities: LiveData&lt;List&lt;Entity&gt;&gt; get() = _entities&#10;&#10;    suspend fun fetchEntities() {&#10;        withContext(Dispatchers.IO) {&#10;            try {&#10;                val response = RetrofitClient.apiService.getEntities()&#10;                if (response.isSuccessful) {&#10;                    _entities.postValue(response.body() ?: emptyList())&#10;                } else {&#10;                    _entities.postValue(emptyList())&#10;                }&#10;            } catch (e: Exception) {&#10;                _entities.postValue(emptyList())&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/locmark/viewmodel/EntityFormViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/locmark/viewmodel/EntityFormViewModel.kt" />
              <option name="originalContent" value="package com.example.locmark.viewmodel&#10;&#10;import android.app.Application&#10;import android.graphics.Bitmap&#10;import android.graphics.BitmapFactory&#10;import android.net.Uri&#10;import androidx.lifecycle.AndroidViewModel&#10;import androidx.lifecycle.LiveData&#10;import androidx.lifecycle.MutableLiveData&#10;import androidx.lifecycle.viewModelScope&#10;import com.example.locmark.model.Entity&#10;import com.example.locmark.network.RetrofitClient&#10;import kotlinx.coroutines.launch&#10;import okhttp3.MediaType&#10;import okhttp3.MediaType.Companion.toMediaTypeOrNull&#10;import okhttp3.MultipartBody&#10;import okhttp3.RequestBody&#10;import java.io.ByteArrayOutputStream&#10;import java.io.InputStream&#10;&#10;class EntityFormViewModel(application: Application) : AndroidViewModel(application) {&#10;    private val _saveResult = MutableLiveData&lt;Boolean&gt;()&#10;    val saveResult: LiveData&lt;Boolean&gt; get() = _saveResult&#10;    private val _error = MutableLiveData&lt;String?&gt;()&#10;    val error: LiveData&lt;String?&gt; get() = _error&#10;&#10;    fun createEntity(title: String, lat: Double, lon: Double, imageUri: Uri?) {&#10;        viewModelScope.launch {&#10;            try {&#10;                val context = getApplication&lt;Application&gt;()&#10;                val titleBody = RequestBody.create(&quot;text/plain&quot;.toMediaTypeOrNull(), title)&#10;                val latBody = RequestBody.create(&quot;text/plain&quot;.toMediaTypeOrNull(), lat.toString())&#10;                val lonBody = RequestBody.create(&quot;text/plain&quot;.toMediaTypeOrNull(), lon.toString())&#10;                val imagePart = imageUri?.let {&#10;                    val inputStream: InputStream? = context.contentResolver.openInputStream(it)&#10;                    val bitmap = BitmapFactory.decodeStream(inputStream)&#10;                    val resized = resizeBitmap(bitmap, 800, 600)&#10;                    val bos = ByteArrayOutputStream()&#10;                    resized.compress(Bitmap.CompressFormat.JPEG, 90, bos)&#10;                    val req = RequestBody.create(&quot;image/jpeg&quot;.toMediaTypeOrNull(), bos.toByteArray())&#10;                    MultipartBody.Part.createFormData(&quot;image&quot;, &quot;image.jpg&quot;, req)&#10;                }&#10;                val response = RetrofitClient.apiService.createEntity(titleBody, latBody, lonBody, imagePart!!)&#10;                _saveResult.postValue(response.isSuccessful)&#10;            } catch (e: Exception) {&#10;                _error.postValue(e.message)&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun resizeBitmap(bitmap: Bitmap, width: Int, height: Int): Bitmap {&#10;        return Bitmap.createScaledBitmap(bitmap, width, height, true)&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.locmark.viewmodel&#10;&#10;import android.app.Application&#10;import android.graphics.Bitmap&#10;import android.graphics.BitmapFactory&#10;import android.net.Uri&#10;import androidx.lifecycle.AndroidViewModel&#10;import androidx.lifecycle.LiveData&#10;import androidx.lifecycle.MutableLiveData&#10;import androidx.lifecycle.viewModelScope&#10;import com.example.locmark.model.Entity&#10;import com.example.locmark.network.RetrofitClient&#10;import kotlinx.coroutines.launch&#10;import okhttp3.MediaType&#10;import okhttp3.MultipartBody&#10;import okhttp3.RequestBody&#10;import java.io.ByteArrayOutputStream&#10;import java.io.InputStream&#10;&#10;class EntityFormViewModel(application: Application) : AndroidViewModel(application) {&#10;    private val _saveResult = MutableLiveData&lt;Boolean&gt;()&#10;    val saveResult: LiveData&lt;Boolean&gt; get() = _saveResult&#10;    private val _error = MutableLiveData&lt;String?&gt;()&#10;    val error: LiveData&lt;String?&gt; get() = _error&#10;&#10;    fun createEntity(title: String, lat: Double, lon: Double, imageUri: Uri?) {&#10;        viewModelScope.launch {&#10;            try {&#10;                val context = getApplication&lt;Application&gt;()&#10;                val titleBody = RequestBody.create(MediaType.parse(&quot;text/plain&quot;), title)&#10;                val latBody = RequestBody.create(MediaType.parse(&quot;text/plain&quot;), lat.toString())&#10;                val lonBody = RequestBody.create(MediaType.parse(&quot;text/plain&quot;), lon.toString())&#10;                val imagePart = imageUri?.let {&#10;                    val inputStream: InputStream? = context.contentResolver.openInputStream(it)&#10;                    val bitmap = BitmapFactory.decodeStream(inputStream)&#10;                    val resized = resizeBitmap(bitmap, 800, 600)&#10;                    val bos = ByteArrayOutputStream()&#10;                    resized.compress(Bitmap.CompressFormat.JPEG, 90, bos)&#10;                    val req = RequestBody.create(MediaType.parse(&quot;image/jpeg&quot;), bos.toByteArray())&#10;                    MultipartBody.Part.createFormData(&quot;image&quot;, &quot;image.jpg&quot;, req)&#10;                }&#10;                val response = RetrofitClient.apiService.createEntity(titleBody, latBody, lonBody, imagePart!!)&#10;                _saveResult.postValue(response.isSuccessful)&#10;            } catch (e: Exception) {&#10;                _error.postValue(e.message)&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun resizeBitmap(bitmap: Bitmap, width: Int, height: Int): Bitmap {&#10;        return Bitmap.createScaledBitmap(bitmap, width, height, true)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/locmark/viewmodel/MapViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/locmark/viewmodel/MapViewModel.kt" />
              <option name="updatedContent" value="package com.example.locmark.viewmodel&#10;&#10;import androidx.lifecycle.LiveData&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.example.locmark.model.Entity&#10;import com.example.locmark.repository.EntityRepository&#10;import kotlinx.coroutines.launch&#10;&#10;class MapViewModel : ViewModel() {&#10;    private val repository = EntityRepository()&#10;    val entities: LiveData&lt;List&lt;Entity&gt;&gt; = repository.entities&#10;&#10;    fun fetchEntities() {&#10;        viewModelScope.launch {&#10;            repository.fetchEntities()&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/fragment_entity_form.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/fragment_entity_form.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;ScrollView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&gt;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;vertical&quot;&#10;        android:padding=&quot;16dp&quot;&gt;&#10;&#10;        &lt;EditText&#10;            android:id=&quot;@+id/editTitle&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:hint=&quot;Title&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/textLat&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Latitude: &quot;&#10;            android:paddingTop=&quot;8dp&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/textLon&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Longitude: &quot; /&gt;&#10;&#10;        &lt;Button&#10;            android:id=&quot;@+id/btnGetLocation&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Get Current Location&quot;&#10;            android:layout_marginTop=&quot;8dp&quot; /&gt;&#10;&#10;        &lt;ImageView&#10;            android:id=&quot;@+id/imagePreview&quot;&#10;            android:layout_width=&quot;200dp&quot;&#10;            android:layout_height=&quot;150dp&quot;&#10;            android:layout_gravity=&quot;center&quot;&#10;            android:scaleType=&quot;centerCrop&quot;&#10;            android:layout_marginTop=&quot;8dp&quot;&#10;            android:background=&quot;#EEE&quot; /&gt;&#10;&#10;        &lt;Button&#10;            android:id=&quot;@+id/btnSelectImage&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Select Image&quot;&#10;            android:layout_marginTop=&quot;8dp&quot; /&gt;&#10;&#10;        &lt;Button&#10;            android:id=&quot;@+id/btnSave&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Save Entity&quot;&#10;            android:layout_marginTop=&quot;16dp&quot; /&gt;&#10;    &lt;/LinearLayout&gt;&#10;&lt;/ScrollView&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;ScrollView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&gt;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;vertical&quot;&#10;        android:padding=&quot;16dp&quot;&gt;&#10;&#10;        &lt;EditText&#10;            android:id=&quot;@+id/editTitle&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:hint=&quot;Title&quot; /&gt;&#10;&#10;        &lt;EditText&#10;            android:id=&quot;@+id/editLat&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:hint=&quot;Latitude&quot;&#10;            android:inputType=&quot;numberDecimal|numberSigned&quot; /&gt;&#10;&#10;        &lt;EditText&#10;            android:id=&quot;@+id/editLon&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:hint=&quot;Longitude&quot;&#10;            android:inputType=&quot;numberDecimal|numberSigned&quot; /&gt;&#10;&#10;        &lt;ImageView&#10;            android:id=&quot;@+id/imagePreview&quot;&#10;            android:layout_width=&quot;200dp&quot;&#10;            android:layout_height=&quot;150dp&quot;&#10;            android:layout_gravity=&quot;center&quot;&#10;            android:scaleType=&quot;centerCrop&quot;&#10;            android:layout_marginTop=&quot;8dp&quot;&#10;            android:background=&quot;#EEE&quot; /&gt;&#10;&#10;        &lt;Button&#10;            android:id=&quot;@+id/btnSelectImage&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Select Image&quot;&#10;            android:layout_marginTop=&quot;8dp&quot; /&gt;&#10;&#10;        &lt;Button&#10;            android:id=&quot;@+id/btnSave&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Save Entity&quot;&#10;            android:layout_marginTop=&quot;16dp&quot; /&gt;&#10;    &lt;/LinearLayout&gt;&#10;&lt;/ScrollView&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/fragment_entity_list.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/fragment_entity_list.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;FrameLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&gt;&#10;    &lt;!-- Placeholder for Entity List --&gt;&#10;&lt;/FrameLayout&gt;&#10;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:orientation=&quot;vertical&quot;&gt;&#10;    &lt;androidx.recyclerview.widget.RecyclerView&#10;        android:id=&quot;@+id/recyclerView&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;match_parent&quot; /&gt;&#10;&lt;/LinearLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/fragment_map.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/fragment_map.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;FrameLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&gt;&#10;    &lt;org.osmdroid.views.MapView&#10;        android:id=&quot;@+id/mapView&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;match_parent&quot; /&gt;&#10;&lt;/FrameLayout&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;FrameLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&gt;&#10;    &lt;org.osmdroid.views.MapView&#10;        android:id=&quot;@+id/mapView&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;match_parent&quot; /&gt;&#10;&#10;    &lt;com.google.android.material.floatingactionbutton.FloatingActionButton&#10;        android:id=&quot;@+id/fabAddEntity&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_gravity=&quot;bottom|end&quot;&#10;        android:layout_margin=&quot;24dp&quot;&#10;        android:contentDescription=&quot;Add Entity&quot;&#10;        android:src=&quot;@android:drawable/ic_input_add&quot; /&gt;&#10;&lt;/FrameLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/item_entity.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/item_entity.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:orientation=&quot;horizontal&quot;&#10;    android:padding=&quot;16dp&quot;&gt;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/entityTitle&quot;&#10;        android:layout_width=&quot;0dp&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_weight=&quot;1&quot;&#10;        android:text=&quot;Entity Title&quot;&#10;        android:textSize=&quot;16sp&quot; /&gt;&#10;    &lt;Button&#10;        android:id=&quot;@+id/btnEdit&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;Edit&quot; /&gt;&#10;    &lt;Button&#10;        android:id=&quot;@+id/btnDelete&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;Delete&quot; /&gt;&#10;&lt;/LinearLayout&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/main_activity.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/main_activity.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.drawerlayout.widget.DrawerLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:id=&quot;@+id/drawer_layout&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;match_parent&quot;&#10;        android:orientation=&quot;vertical&quot;&gt;&#10;&#10;        &lt;androidx.appcompat.widget.Toolbar&#10;            android:id=&quot;@+id/toolbar&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:background=&quot;?attr/colorPrimary&quot;&#10;            android:theme=&quot;@style/ThemeOverlay.AppCompat.Dark.ActionBar&quot;&#10;            app:popupTheme=&quot;@style/ThemeOverlay.AppCompat.Light&quot; /&gt;&#10;&#10;        &lt;fragment&#10;            android:id=&quot;@+id/nav_host_fragment_container&quot;&#10;            android:name=&quot;androidx.navigation.fragment.NavHostFragment&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;0dp&quot;&#10;            android:layout_weight=&quot;1&quot;&#10;            app:navGraph=&quot;@navigation/nav_graph&quot;&#10;            app:defaultNavHost=&quot;true&quot; /&gt;&#10;    &lt;/LinearLayout&gt;&#10;&#10;    &lt;com.google.android.material.navigation.NavigationView&#10;        android:id=&quot;@+id/navigation_view&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;match_parent&quot;&#10;        android:layout_gravity=&quot;start&quot;&#10;        android:fitsSystemWindows=&quot;true&quot;&#10;        android:background=&quot;@android:color/white&quot;&#10;        app:menu=&quot;@menu/drawer_menu&quot; /&gt;&#10;&#10;&lt;/androidx.drawerlayout.widget.DrawerLayout&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.drawerlayout.widget.DrawerLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:id=&quot;@+id/drawer_layout&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;match_parent&quot;&#10;        android:orientation=&quot;vertical&quot;&gt;&#10;&#10;        &lt;androidx.appcompat.widget.Toolbar&#10;            android:id=&quot;@+id/toolbar&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:background=&quot;?attr/colorPrimary&quot;&#10;            android:theme=&quot;@style/ThemeOverlay.AppCompat.Dark.ActionBar&quot;&#10;            app:popupTheme=&quot;@style/ThemeOverlay.AppCompat.Light&quot; /&gt;&#10;&#10;        &lt;fragment&#10;            android:id=&quot;@+id/nav_host_fragment_container&quot;&#10;            android:name=&quot;androidx.navigation.fragment.NavHostFragment&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;0dp&quot;&#10;            android:layout_weight=&quot;1&quot;&#10;            app:navGraph=&quot;@navigation/nav_graph&quot;&#10;            app:defaultNavHost=&quot;true&quot; /&gt;&#10;    &lt;/LinearLayout&gt;&#10;&#10;    &lt;com.google.android.material.navigation.NavigationView&#10;        android:id=&quot;@+id/navigation_view&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;match_parent&quot;&#10;        android:layout_gravity=&quot;start&quot;&#10;        android:fitsSystemWindows=&quot;true&quot;&#10;        android:background=&quot;@color/design_default_color_primary_dark&quot;&#10;        app:itemTextColor=&quot;@android:color/white&quot;&#10;        app:itemIconTint=&quot;@android:color/white&quot;&#10;        app:headerLayout=&quot;@layout/nav_header&quot;&#10;        app:menu=&quot;@menu/drawer_menu&quot; /&gt;&#10;&#10;&lt;/androidx.drawerlayout.widget.DrawerLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/nav_header.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/nav_header.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;120dp&quot;&#10;    android:background=&quot;@color/design_default_color_primary&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:gravity=&quot;bottom&quot;&#10;    android:padding=&quot;16dp&quot;&gt;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/nav_header_title&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;GeoEntityApp&quot;&#10;        android:textColor=&quot;@android:color/white&quot;&#10;        android:textSize=&quot;20sp&quot;&#10;        android:textStyle=&quot;bold&quot; /&gt;&#10;&lt;/LinearLayout&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/menu/drawer_menu.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/menu/drawer_menu.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;menu xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;    &lt;item&#10;        android:id=&quot;@+id/nav_map&quot;&#10;        android:title=&quot;Map&quot; /&gt;&#10;    &lt;item&#10;        android:id=&quot;@+id/nav_form&quot;&#10;        android:title=&quot;Form&quot; /&gt;&#10;    &lt;item&#10;        android:id=&quot;@+id/nav_list&quot;&#10;        android:title=&quot;List&quot; /&gt;&#10;&lt;/menu&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/navigation/nav_graph.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/navigation/nav_graph.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;navigation xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:id=&quot;@+id/nav_graph&quot;&#10;    app:startDestination=&quot;@id/mapFragment&quot;&gt;&#10;&#10;    &lt;fragment&#10;        android:id=&quot;@+id/mapFragment&quot;&#10;        android:name=&quot;com.example.locmark.MapFragment&quot;&#10;        android:label=&quot;Map&quot; /&gt;&#10;    &lt;fragment&#10;        android:id=&quot;@+id/entityFormFragment&quot;&#10;        android:name=&quot;com.example.locmark.EntityFormFragment&quot;&#10;        android:label=&quot;Form&quot; /&gt;&#10;    &lt;fragment&#10;        android:id=&quot;@+id/entityListFragment&quot;&#10;        android:name=&quot;com.example.locmark.EntityListFragment&quot;&#10;        android:label=&quot;List&quot; /&gt;&#10;&lt;/navigation&gt;&#10;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;navigation xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:id=&quot;@+id/nav_graph&quot;&#10;    app:startDestination=&quot;@id/mapFragment&quot;&gt;&#10;&#10;    &lt;fragment&#10;        android:id=&quot;@+id/mapFragment&quot;&#10;        android:name=&quot;com.example.locmark.MapFragment&quot;&#10;        android:label=&quot;Map&quot; /&gt;&#10;    &lt;fragment&#10;        android:id=&quot;@+id/entityFormFragment&quot;&#10;        android:name=&quot;com.example.locmark.EntityFormFragment&quot;&#10;        android:label=&quot;Form&quot; /&gt;&#10;    &lt;fragment&#10;        android:id=&quot;@+id/entityListFragment&quot;&#10;        android:name=&quot;com.example.locmark.EntityListFragment&quot;&#10;        android:label=&quot;List&quot; /&gt;&#10;&lt;/navigation&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/values/styles.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/values/styles.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;resources&gt;&#10;    &lt;!-- Removed duplicate Theme.LocMark definition. Use only in themes.xml --&gt;&#10;&lt;/resources&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;resources&gt;&#10;    &lt;!-- No theme definitions here. Only use themes.xml for Theme.LocMark. --&gt;&#10;&lt;/resources&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/values/themes.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/values/themes.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;resources&gt;&#10;&#10;    &lt;style name=&quot;Theme.LocMark&quot; parent=&quot;android:Theme.Material.Light.NoActionBar&quot; /&gt;&#10;&lt;/resources&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;resources&gt;&#10;    &lt;!-- Use only the MaterialComponents theme for Theme.LocMark --&gt;&#10;    &lt;style name=&quot;Theme.LocMark&quot; parent=&quot;Theme.MaterialComponents.DayNight.NoActionBar&quot; /&gt;&#10;&lt;/resources&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>