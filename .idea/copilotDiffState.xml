<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/locmark/MainActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/locmark/MainActivity.kt" />
              <option name="originalContent" value="package com.example.locmark&#10;&#10;import android.os.Bundle&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.core.view.GravityCompat&#10;import androidx.drawerlayout.widget.DrawerLayout&#10;import androidx.navigation.NavController&#10;import androidx.navigation.fragment.NavHostFragment&#10;import androidx.navigation.ui.AppBarConfiguration&#10;import androidx.navigation.ui.NavigationUI&#10;import com.google.android.material.navigation.NavigationView&#10;import com.example.locmark.R&#10;&#10;class MainActivity : AppCompatActivity() {&#10;    private lateinit var drawerLayout: DrawerLayout&#10;    private lateinit var navController: NavController&#10;    private lateinit var appBarConfiguration: AppBarConfiguration&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.main_activity)&#10;&#10;        drawerLayout = findViewById(R.id.drawer_layout)&#10;        val navView: NavigationView = findViewById(R.id.navigation_view)&#10;        val navHostFragment = supportFragmentManager.findFragmentById(R.id.nav_host_fragment_container) as NavHostFragment&#10;        navController = navHostFragment.navController&#10;&#10;        appBarConfiguration = AppBarConfiguration(&#10;            setOf(R.id.mapFragment, R.id.entityFormFragment, R.id.entityListFragment), drawerLayout&#10;        )&#10;        NavigationUI.setupWithNavController(navView, navController)&#10;&#10;        navView.setNavigationItemSelectedListener { menuItem -&gt;&#10;            when (menuItem.itemId) {&#10;                R.id.nav_map -&gt; navController.navigate(R.id.mapFragment)&#10;                R.id.nav_form -&gt; navController.navigate(R.id.entityFormFragment)&#10;                R.id.nav_list -&gt; navController.navigate(R.id.entityListFragment)&#10;            }&#10;            drawerLayout.closeDrawer(GravityCompat.START)&#10;            true&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.locmark&#10;&#10;import android.os.Bundle&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.appcompat.widget.Toolbar&#10;import androidx.core.view.GravityCompat&#10;import androidx.drawerlayout.widget.DrawerLayout&#10;import androidx.navigation.NavController&#10;import androidx.navigation.fragment.NavHostFragment&#10;import androidx.navigation.ui.AppBarConfiguration&#10;import androidx.navigation.ui.NavigationUI&#10;import com.google.android.material.navigation.NavigationView&#10;import com.example.locmark.R&#10;&#10;class MainActivity : AppCompatActivity() {&#10;    private lateinit var drawerLayout: DrawerLayout&#10;    private lateinit var navController: NavController&#10;    private lateinit var appBarConfiguration: AppBarConfiguration&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.main_activity)&#10;&#10;        val toolbar: Toolbar = findViewById(R.id.toolbar)&#10;        setSupportActionBar(toolbar)&#10;&#10;        drawerLayout = findViewById(R.id.drawer_layout)&#10;        val navView: NavigationView = findViewById(R.id.navigation_view)&#10;        val navHostFragment = supportFragmentManager.findFragmentById(R.id.nav_host_fragment_container) as NavHostFragment&#10;        navController = navHostFragment.navController&#10;&#10;        appBarConfiguration = AppBarConfiguration(&#10;            setOf(R.id.mapFragment, R.id.entityFormFragment, R.id.entityListFragment), drawerLayout&#10;        )&#10;        NavigationUI.setupActionBarWithNavController(this, navController, appBarConfiguration)&#10;        NavigationUI.setupWithNavController(navView, navController)&#10;&#10;        navView.setNavigationItemSelectedListener { menuItem -&gt;&#10;            when (menuItem.itemId) {&#10;                R.id.nav_map -&gt; navController.navigate(R.id.mapFragment)&#10;                R.id.nav_form -&gt; navController.navigate(R.id.entityFormFragment)&#10;                R.id.nav_list -&gt; navController.navigate(R.id.entityListFragment)&#10;            }&#10;            drawerLayout.closeDrawer(GravityCompat.START)&#10;            true&#10;        }&#10;    }&#10;&#10;    override fun onSupportNavigateUp(): Boolean {&#10;        return NavigationUI.navigateUp(navController, appBarConfiguration) || super.onSupportNavigateUp()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/locmark/network/ApiService.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/locmark/network/ApiService.kt" />
              <option name="updatedContent" value="package com.example.locmark.network&#10;&#10;import com.example.locmark.model.Entity&#10;import okhttp3.MultipartBody&#10;import okhttp3.RequestBody&#10;import retrofit2.Response&#10;import retrofit2.http.*&#10;&#10;interface ApiService {&#10;    @GET(&quot;api.php&quot;)&#10;    suspend fun getEntities(): Response&lt;List&lt;Entity&gt;&gt;&#10;&#10;    @Multipart&#10;    @POST(&quot;api.php&quot;)&#10;    suspend fun createEntity(&#10;        @Part(&quot;title&quot;) title: RequestBody,&#10;        @Part(&quot;lat&quot;) lat: RequestBody,&#10;        @Part(&quot;lon&quot;) lon: RequestBody,&#10;        @Part image: MultipartBody.Part&#10;    ): Response&lt;Entity&gt;&#10;&#10;    @FormUrlEncoded&#10;    @PUT(&quot;api.php&quot;)&#10;    suspend fun updateEntity(&#10;        @Field(&quot;id&quot;) id: Int,&#10;        @Field(&quot;title&quot;) title: String,&#10;        @Field(&quot;lat&quot;) lat: Double,&#10;        @Field(&quot;lon&quot;) lon: Double&#10;    ): Response&lt;Void&gt;&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/locmark/network/RetrofitClient.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/locmark/network/RetrofitClient.kt" />
              <option name="updatedContent" value="package com.example.locmark.network&#10;&#10;import retrofit2.Retrofit&#10;import retrofit2.converter.gson.GsonConverterFactory&#10;&#10;object RetrofitClient {&#10;    private const val BASE_URL = &quot;http://10.0.2.2/path/to/your/api/folder/&quot;&#10;&#10;    val apiService: ApiService by lazy {&#10;        Retrofit.Builder()&#10;            .baseUrl(BASE_URL)&#10;            .addConverterFactory(GsonConverterFactory.create())&#10;            .build()&#10;            .create(ApiService::class.java)&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>